{
  "address": "0x69fBe5461B16aC5047c4d995667E7A38d1270E9E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ELITE_LEVEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXPLORER_LEVEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGENDARY_LEVEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PIONEER_LEVEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x31f5fcb59d3bc1d17a8af2dfc1847bddb8a3454efaf05c2de12f81271e212663",
  "receipt": {
    "to": null,
    "from": "0x6aD90bB24ed985F3876aDE9AE09381b1Cd180548",
    "contractAddress": "0x69fBe5461B16aC5047c4d995667E7A38d1270E9E",
    "transactionIndex": 42,
    "gasUsed": "458541",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa7b5a719583dfdabf50b41f71e48a3e37b65918bcb7a591ff55b6cf9d31a3439",
    "transactionHash": "0x31f5fcb59d3bc1d17a8af2dfc1847bddb8a3454efaf05c2de12f81271e212663",
    "logs": [],
    "blockNumber": 137603918,
    "cumulativeGasUsed": "22127370",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "af731e5de29c5fb7eff0716dc0370927",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ELITE_LEVEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXPLORER_LEVEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGENDARY_LEVEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PIONEER_LEVEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Echizen500NightmareFox12\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaCashback.sol\":\"MetaCashback\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/MetaCashback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Echizen500\\r\\n * @author NightmareFox12\\r\\n */\\r\\n\\r\\ncontract MetaCashback {\\r\\n    IERC20 public USDCToken = IERC20(0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85);\\r\\n\\r\\n    //constans\\r\\n    bytes32 public constant EXPLORER_LEVEL = \\\"EXPLORER_LEVEL\\\";\\r\\n    bytes32 public constant PIONEER_LEVEL = \\\"PIONEER_LEVEL\\\";\\r\\n    bytes32 public constant LEGENDARY_LEVEL = \\\"LEGENDARY_LEVEL\\\";\\r\\n    bytes32 public constant ELITE_LEVEL = \\\"ELITE_LEVEL\\\";\\r\\n\\r\\n    struct StakeStruct {\\r\\n        uint256 amount;\\r\\n        uint256 timeStamp;\\r\\n    }\\r\\n\\r\\n    // states\\r\\n    mapping(address => StakeStruct) stakes;\\r\\n    uint256 public rewardRate = 10;\\r\\n    uint256 public minStakingAmount = 5 * 10 ** 6;\\r\\n\\r\\n    //constructor\\r\\n    constructor() {}\\r\\n\\r\\n    //Views\\r\\n    function getLevel() public view returns (bytes32) {\\r\\n        uint256 userStaking = stakes[msg.sender].amount;\\r\\n\\r\\n        if (userStaking < 100) {\\r\\n            return EXPLORER_LEVEL;\\r\\n        } else if (userStaking < 500) {\\r\\n            return PIONEER_LEVEL;\\r\\n        } else if (userStaking < 1000) {\\r\\n            return LEGENDARY_LEVEL;\\r\\n        } else {\\r\\n            return ELITE_LEVEL;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stakeTokens(uint256 _amount) public {\\r\\n        require(_amount > 0, \\\"Deposit amount must be greater than zero\\\");\\r\\n        require(\\r\\n            _amount >= minStakingAmount && USDCToken.allowance(msg.sender, address(this)) >= minStakingAmount,\\r\\n            \\\"The amount of the deposit must be higher than the minimum amount\\\"\\r\\n        );\\r\\n\\r\\n        require(USDCToken.transferFrom(msg.sender, address(this), _amount), \\\"Token transfer failed\\\");\\r\\n\\r\\n        stakes[msg.sender] = StakeStruct({ amount: _amount, timeStamp: block.timestamp });\\r\\n    }\\r\\n\\r\\n    // function calculateReward(address staker) public view returns (uint256) {\\r\\n    //     require(stakes[staker] > 0, \\\"No tokens staked\\\");\\r\\n\\r\\n    //     uint256 timeStaked = block.timestamp - timestamps[staker];\\r\\n    //     return (stakes[staker] * rewardRate * timeStaked) / (365 days * 100);\\r\\n    // }\\r\\n\\r\\n    // Descomenta y usa la funci\\u00f3n calculateReward para obtener la recompensa\\r\\n    // uint256 reward = calculateReward(msg.sender); // <-- Aqu\\u00ed se define 'reward'\\r\\n    // uint256 totalAmount = stakes[msg.sender] + reward;\\r\\n\\r\\n    function withdrawStake() public {\\r\\n        require(stakes[msg.sender].amount > 0, \\\"No tokens available for withdrawal\\\");\\r\\n\\r\\n        uint256 totalAmount = stakes[msg.sender].amount;\\r\\n\\r\\n        delete stakes[msg.sender];\\r\\n        require(USDCToken.transfer(msg.sender, totalAmount), \\\"Token transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x54f9b31cce962e2ed07ae005f5f8f51520aa695d6cfae84cd197366b94d04923\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b031916730b2c639c533813f4aa9d7837caf62653d097ff85179055600a600255624c4b4060035534801561004257600080fd5b5061061d806100526000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637b0a47ee116100665780637b0a47ee1461012d578063a5985e8c14610136578063b6caaffb1461013e578063bed9d86114610155578063f10273f21461015d57600080fd5b806321fddf2f146100a357806325c065b1146100cf5780634c34c8de146100d85780636cc832ff146101035780637547c7a314610118575b600080fd5b6100bc6e131151d1539110549657d311559153608a1b81565b6040519081526020015b60405180910390f35b6100bc60035481565b6000546100eb906001600160a01b031681565b6040516001600160a01b0390911681526020016100c6565b6100bc6a115312551157d31155915360aa1b81565b61012b61012636600461058c565b610175565b005b6100bc60025481565b6100bc6103c2565b6100bc6c141253d391515497d311559153609a1b81565b61012b61044c565b6100bc6d1156141313d4915497d31155915360921b81565b600081116101db5760405162461bcd60e51b815260206004820152602860248201527f4465706f73697420616d6f756e74206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b60035481101580156102605750600354600054604051636eb1769f60e11b81523360048201523060248201526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d91906105a5565b10155b6102d4576040805162461bcd60e51b81526020600482015260248101919091527f54686520616d6f756e74206f6620746865206465706f736974206d757374206260448201527f6520686967686572207468616e20746865206d696e696d756d20616d6f756e7460648201526084016101d2565b6000546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f91906105be565b6103935760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016101d2565b604080518082018252918252426020808401918252336000908152600191829052929092209251835551910155565b3360009081526001602052604081205460648110156103f3576d1156141313d4915497d31155915360921b91505090565b6101f4811015610414576c141253d391515497d311559153609a1b91505090565b6103e8811015610437576e131151d1539110549657d311559153608a1b91505090565b6a115312551157d31155915360aa1b91505090565b336000908152600160205260409020546104b35760405162461bcd60e51b815260206004820152602260248201527f4e6f20746f6b656e7320617661696c61626c6520666f72207769746864726177604482015261185b60f21b60648201526084016101d2565b336000818152600160208190526040808320805484825592018390559154915163a9059cbb60e01b8152600481019390935260248301819052916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610521573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054591906105be565b6105895760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016101d2565b50565b60006020828403121561059e57600080fd5b5035919050565b6000602082840312156105b757600080fd5b5051919050565b6000602082840312156105d057600080fd5b815180151581146105e057600080fd5b939250505056fea2646970667358221220c94a247ffcffbdbcee66dd6758212be6d45ddbd3d04acf3a7c62998ea5b3ec6c64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637b0a47ee116100665780637b0a47ee1461012d578063a5985e8c14610136578063b6caaffb1461013e578063bed9d86114610155578063f10273f21461015d57600080fd5b806321fddf2f146100a357806325c065b1146100cf5780634c34c8de146100d85780636cc832ff146101035780637547c7a314610118575b600080fd5b6100bc6e131151d1539110549657d311559153608a1b81565b6040519081526020015b60405180910390f35b6100bc60035481565b6000546100eb906001600160a01b031681565b6040516001600160a01b0390911681526020016100c6565b6100bc6a115312551157d31155915360aa1b81565b61012b61012636600461058c565b610175565b005b6100bc60025481565b6100bc6103c2565b6100bc6c141253d391515497d311559153609a1b81565b61012b61044c565b6100bc6d1156141313d4915497d31155915360921b81565b600081116101db5760405162461bcd60e51b815260206004820152602860248201527f4465706f73697420616d6f756e74206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b60035481101580156102605750600354600054604051636eb1769f60e11b81523360048201523060248201526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d91906105a5565b10155b6102d4576040805162461bcd60e51b81526020600482015260248101919091527f54686520616d6f756e74206f6620746865206465706f736974206d757374206260448201527f6520686967686572207468616e20746865206d696e696d756d20616d6f756e7460648201526084016101d2565b6000546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f91906105be565b6103935760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016101d2565b604080518082018252918252426020808401918252336000908152600191829052929092209251835551910155565b3360009081526001602052604081205460648110156103f3576d1156141313d4915497d31155915360921b91505090565b6101f4811015610414576c141253d391515497d311559153609a1b91505090565b6103e8811015610437576e131151d1539110549657d311559153608a1b91505090565b6a115312551157d31155915360aa1b91505090565b336000908152600160205260409020546104b35760405162461bcd60e51b815260206004820152602260248201527f4e6f20746f6b656e7320617661696c61626c6520666f72207769746864726177604482015261185b60f21b60648201526084016101d2565b336000818152600160208190526040808320805484825592018390559154915163a9059cbb60e01b8152600481019390935260248301819052916001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610521573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054591906105be565b6105895760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b60448201526064016101d2565b50565b60006020828403121561059e57600080fd5b5035919050565b6000602082840312156105b757600080fd5b5051919050565b6000602082840312156105d057600080fd5b815180151581146105e057600080fd5b939250505056fea2646970667358221220c94a247ffcffbdbcee66dd6758212be6d45ddbd3d04acf3a7c62998ea5b3ec6c64736f6c63430008140033",
  "devdoc": {
    "author": "Echizen500NightmareFox12",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 87,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "USDCToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 109,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "stakes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(StakeStruct)104_storage)"
      },
      {
        "astId": 112,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "rewardRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 119,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "minStakingAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(StakeStruct)104_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MetaCashback.StakeStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeStruct)104_storage"
      },
      "t_struct(StakeStruct)104_storage": {
        "encoding": "inplace",
        "label": "struct MetaCashback.StakeStruct",
        "members": [
          {
            "astId": 101,
            "contract": "contracts/MetaCashback.sol:MetaCashback",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 103,
            "contract": "contracts/MetaCashback.sol:MetaCashback",
            "label": "timeStamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}