{
  "address": "0x1243cFC1De9a19D72fEF7fd99c46e4FFFBaf307c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initalOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ELITE_LEVEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXPLORER_LEVEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGENDARY_LEVEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PIONEER_LEVEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDCToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x94573072504f2b8cd8e0cf247f63b15d968cffac3e5ced92b1f3997fc98395d5",
  "receipt": {
    "to": null,
    "from": "0x6aD90bB24ed985F3876aDE9AE09381b1Cd180548",
    "contractAddress": "0x1243cFC1De9a19D72fEF7fd99c46e4FFFBaf307c",
    "transactionIndex": 26,
    "gasUsed": "561276",
    "logsBloom": "0x
    "blockHash": "0x57c270c6cf92d047d57ae3d971c17e502163472db6feac4a8ccf6ee25277fa31",
    "transactionHash": "0x94573072504f2b8cd8e0cf247f63b15d968cffac3e5ced92b1f3997fc98395d5",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 137647519,
        "transactionHash": "0x94573072504f2b8cd8e0cf247f63b15d968cffac3e5ced92b1f3997fc98395d5",
        "address": "0x1243cFC1De9a19D72fEF7fd99c46e4FFFBaf307c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006ad90bb24ed985f3876ade9ae09381b1cd180548"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x57c270c6cf92d047d57ae3d971c17e502163472db6feac4a8ccf6ee25277fa31"
      }
    ],
    "blockNumber": 137647519,
    "cumulativeGasUsed": "8484563",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6aD90bB24ed985F3876aDE9AE09381b1Cd180548"
  ],
  "numDeployments": 2,
  "solcInputHash": "7ad7f550d74cf0f3dc04fa3e077d0809",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initalOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ELITE_LEVEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXPLORER_LEVEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGENDARY_LEVEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PIONEER_LEVEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Echizen500NightmareFox12\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaCashback.sol\":\"MetaCashback\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MetaCashback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author Echizen500\\r\\n * @author NightmareFox12\\r\\n */\\r\\n\\r\\ncontract MetaCashback is Ownable {\\r\\n    IERC20 public USDCToken = IERC20(0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85);\\r\\n\\r\\n    //constans\\r\\n    bytes32 public constant EXPLORER_LEVEL = \\\"EXPLORER_LEVEL\\\";\\r\\n    bytes32 public constant PIONEER_LEVEL = \\\"PIONEER_LEVEL\\\";\\r\\n    bytes32 public constant LEGENDARY_LEVEL = \\\"LEGENDARY_LEVEL\\\";\\r\\n    bytes32 public constant ELITE_LEVEL = \\\"ELITE_LEVEL\\\";\\r\\n\\r\\n    struct StakeStruct {\\r\\n        uint256 amount;\\r\\n        uint256 timeStamp;\\r\\n    }\\r\\n\\r\\n    // states\\r\\n    mapping(address => StakeStruct) stakes;\\r\\n    uint256 public rewardRate = 10;\\r\\n    uint256 public minStakingAmount = 5 * 10 ** 6;\\r\\n\\r\\n    //constructor\\r\\n    constructor(address initalOwner) Ownable(initalOwner) {}\\r\\n\\r\\n    //Views\\r\\n    function getLevel() public view returns (bytes32) {\\r\\n        uint256 userStaking = stakes[msg.sender].amount;\\r\\n\\r\\n        if (userStaking < 100) {\\r\\n            return EXPLORER_LEVEL;\\r\\n        } else if (userStaking < 500) {\\r\\n            return PIONEER_LEVEL;\\r\\n        } else if (userStaking < 1000) {\\r\\n            return LEGENDARY_LEVEL;\\r\\n        } else {\\r\\n            return ELITE_LEVEL;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stakeTokens(uint256 _amount) public {\\r\\n        require(_amount > 0, \\\"Deposit amount must be greater than zero\\\");\\r\\n        require(\\r\\n            _amount >= minStakingAmount && USDCToken.allowance(msg.sender, address(this)) >= minStakingAmount,\\r\\n            \\\"The amount of the deposit must be higher than the minimum amount\\\"\\r\\n        );\\r\\n\\r\\n        require(USDCToken.transferFrom(msg.sender, address(this), _amount), \\\"Token transfer failed\\\");\\r\\n\\r\\n        stakes[msg.sender] = StakeStruct({ amount: _amount, timeStamp: block.timestamp });\\r\\n    }\\r\\n\\r\\n    function withdrawStake() public {\\r\\n        require(stakes[msg.sender].amount > 0, \\\"No tokens available for withdrawal\\\");\\r\\n\\r\\n        uint256 totalAmount = stakes[msg.sender].amount;\\r\\n\\r\\n        delete stakes[msg.sender];\\r\\n        require(USDCToken.transfer(msg.sender, totalAmount), \\\"Token transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe89f6b2d9fe0c5aa4e3d069ffff4e0f6feb18bff7cad823bf8b2e21d766174c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b031916730b2c639c533813f4aa9d7837caf62653d097ff85179055600a600355624c4b4060045534801561004257600080fd5b506040516108a73803806108a7833981016040819052610061916100f0565b806001600160a01b03811661009057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b610099816100a0565b5050610120565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561010257600080fd5b81516001600160a01b038116811461011957600080fd5b9392505050565b6107788061012f6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637b0a47ee1161008c578063b6caaffb11610066578063b6caaffb14610188578063bed9d8611461019f578063f10273f2146101a7578063f2fde38b146101bf57600080fd5b80637b0a47ee146101665780638da5cb5b1461016f578063a5985e8c1461018057600080fd5b806321fddf2f146100d457806325c065b1146101005780634c34c8de146101095780636cc832ff14610134578063715018a6146101495780637547c7a314610153575b600080fd5b6100ed6e131151d1539110549657d311559153608a1b81565b6040519081526020015b60405180910390f35b6100ed60045481565b60015461011c906001600160a01b031681565b6040516001600160a01b0390911681526020016100f7565b6100ed6a115312551157d31155915360aa1b81565b6101516101d2565b005b6101516101613660046106be565b6101e6565b6100ed60035481565b6000546001600160a01b031661011c565b6100ed61043a565b6100ed6c141253d391515497d311559153609a1b81565b6101516104c4565b6100ed6d1156141313d4915497d31155915360921b81565b6101516101cd3660046106d7565b610606565b6101da610641565b6101e4600061066e565b565b6000811161024c5760405162461bcd60e51b815260206004820152602860248201527f4465706f73697420616d6f756e74206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b60045481101580156102d6575060048054600154604051636eb1769f60e11b8152339381019390935230602484015290916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d39190610707565b10155b61034a576040805162461bcd60e51b81526020600482015260248101919091527f54686520616d6f756e74206f6620746865206465706f736974206d757374206260448201527f6520686967686572207468616e20746865206d696e696d756d20616d6f756e746064820152608401610243565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156103a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c59190610720565b6104095760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610243565b6040805180820182529182524260208084019182523360009081526002909152919091209151825551600190910155565b33600090815260026020526040812054606481101561046b576d1156141313d4915497d31155915360921b91505090565b6101f481101561048c576c141253d391515497d311559153609a1b91505090565b6103e88110156104af576e131151d1539110549657d311559153608a1b91505090565b6a115312551157d31155915360aa1b91505090565b3360009081526002602052604090205461052b5760405162461bcd60e51b815260206004820152602260248201527f4e6f20746f6b656e7320617661696c61626c6520666f72207769746864726177604482015261185b60f21b6064820152608401610243565b33600081815260026020526040808220805483825560019182019390935554905163a9059cbb60e01b815260048101939093526024830182905290916001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf9190610720565b6106035760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610243565b50565b61060e610641565b6001600160a01b03811661063857604051631e4fbdf760e01b815260006004820152602401610243565b6106038161066e565b6000546001600160a01b031633146101e45760405163118cdaa760e01b8152336004820152602401610243565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156106d057600080fd5b5035919050565b6000602082840312156106e957600080fd5b81356001600160a01b038116811461070057600080fd5b9392505050565b60006020828403121561071957600080fd5b5051919050565b60006020828403121561073257600080fd5b8151801515811461070057600080fdfea26469706673582212209023e9135d74cc45e83ddc5283208f497a32e3a8beed7b3f5357adb209fc9a6564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637b0a47ee1161008c578063b6caaffb11610066578063b6caaffb14610188578063bed9d8611461019f578063f10273f2146101a7578063f2fde38b146101bf57600080fd5b80637b0a47ee146101665780638da5cb5b1461016f578063a5985e8c1461018057600080fd5b806321fddf2f146100d457806325c065b1146101005780634c34c8de146101095780636cc832ff14610134578063715018a6146101495780637547c7a314610153575b600080fd5b6100ed6e131151d1539110549657d311559153608a1b81565b6040519081526020015b60405180910390f35b6100ed60045481565b60015461011c906001600160a01b031681565b6040516001600160a01b0390911681526020016100f7565b6100ed6a115312551157d31155915360aa1b81565b6101516101d2565b005b6101516101613660046106be565b6101e6565b6100ed60035481565b6000546001600160a01b031661011c565b6100ed61043a565b6100ed6c141253d391515497d311559153609a1b81565b6101516104c4565b6100ed6d1156141313d4915497d31155915360921b81565b6101516101cd3660046106d7565b610606565b6101da610641565b6101e4600061066e565b565b6000811161024c5760405162461bcd60e51b815260206004820152602860248201527f4465706f73697420616d6f756e74206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b60045481101580156102d6575060048054600154604051636eb1769f60e11b8152339381019390935230602484015290916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d39190610707565b10155b61034a576040805162461bcd60e51b81526020600482015260248101919091527f54686520616d6f756e74206f6620746865206465706f736974206d757374206260448201527f6520686967686572207468616e20746865206d696e696d756d20616d6f756e746064820152608401610243565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156103a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c59190610720565b6104095760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610243565b6040805180820182529182524260208084019182523360009081526002909152919091209151825551600190910155565b33600090815260026020526040812054606481101561046b576d1156141313d4915497d31155915360921b91505090565b6101f481101561048c576c141253d391515497d311559153609a1b91505090565b6103e88110156104af576e131151d1539110549657d311559153608a1b91505090565b6a115312551157d31155915360aa1b91505090565b3360009081526002602052604090205461052b5760405162461bcd60e51b815260206004820152602260248201527f4e6f20746f6b656e7320617661696c61626c6520666f72207769746864726177604482015261185b60f21b6064820152608401610243565b33600081815260026020526040808220805483825560019182019390935554905163a9059cbb60e01b815260048101939093526024830182905290916001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf9190610720565b6106035760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610243565b50565b61060e610641565b6001600160a01b03811661063857604051631e4fbdf760e01b815260006004820152602401610243565b6106038161066e565b6000546001600160a01b031633146101e45760405163118cdaa760e01b8152336004820152602401610243565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156106d057600080fd5b5035919050565b6000602082840312156106e957600080fd5b81356001600160a01b038116811461070057600080fd5b9392505050565b60006020828403121561071957600080fd5b5051919050565b60006020828403121561073257600080fd5b8151801515811461070057600080fdfea26469706673582212209023e9135d74cc45e83ddc5283208f497a32e3a8beed7b3f5357adb209fc9a6564736f6c63430008140033",
  "devdoc": {
    "author": "Echizen500NightmareFox12",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 268,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "USDCToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 290,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "stakes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(StakeStruct)285_storage)"
      },
      {
        "astId": 293,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "rewardRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 300,
        "contract": "contracts/MetaCashback.sol:MetaCashback",
        "label": "minStakingAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(StakeStruct)285_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MetaCashback.StakeStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeStruct)285_storage"
      },
      "t_struct(StakeStruct)285_storage": {
        "encoding": "inplace",
        "label": "struct MetaCashback.StakeStruct",
        "members": [
          {
            "astId": 282,
            "contract": "contracts/MetaCashback.sol:MetaCashback",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 284,
            "contract": "contracts/MetaCashback.sol:MetaCashback",
            "label": "timeStamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}