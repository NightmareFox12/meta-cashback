{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/MetaCashback.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @author Echizen500\r\n * @author NightmareFox12\r\n */\r\n\r\ncontract MetaCashback {\r\n    IERC20 public USDCToken = IERC20(0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85);\r\n\r\n    //constans\r\n    bytes32 public constant EXPLORER_LEVEL = \"EXPLORER_LEVEL\";\r\n    bytes32 public constant PIONEER_LEVEL = \"PIONEER_LEVEL\";\r\n    bytes32 public constant LEGENDARY_LEVEL = \"LEGENDARY_LEVEL\";\r\n    bytes32 public constant ELITE_LEVEL = \"ELITE_LEVEL\";\r\n\r\n    struct StakeStruct {\r\n        uint256 amount;\r\n        uint256 timeStamp;\r\n    }\r\n\r\n    // states\r\n    mapping(address => StakeStruct) stakes;\r\n    uint256 public rewardRate = 10;\r\n    uint256 public minStakingAmount = 5 * 10 ** 6;\r\n\r\n    //constructor\r\n    constructor() {}\r\n\r\n    //Views\r\n    function getLevel() public view returns (bytes32) {\r\n        uint256 userStaking = stakes[msg.sender].amount;\r\n\r\n        if (userStaking < 100) {\r\n            return EXPLORER_LEVEL;\r\n        } else if (userStaking < 500) {\r\n            return PIONEER_LEVEL;\r\n        } else if (userStaking < 1000) {\r\n            return LEGENDARY_LEVEL;\r\n        } else {\r\n            return ELITE_LEVEL;\r\n        }\r\n    }\r\n\r\n    function stakeTokens(uint256 _amount) public {\r\n        require(_amount > 0, \"Deposit amount must be greater than zero\");\r\n        require(\r\n            _amount >= minStakingAmount && USDCToken.allowance(msg.sender, address(this)) >= minStakingAmount,\r\n            \"The amount of the deposit must be higher than the minimum amount\"\r\n        );\r\n\r\n        require(USDCToken.transferFrom(msg.sender, address(this), _amount), \"Token transfer failed\");\r\n\r\n        stakes[msg.sender] = StakeStruct({ amount: _amount, timeStamp: block.timestamp });\r\n    }\r\n\r\n    // function calculateReward(address staker) public view returns (uint256) {\r\n    //     require(stakes[staker] > 0, \"No tokens staked\");\r\n\r\n    //     uint256 timeStaked = block.timestamp - timestamps[staker];\r\n    //     return (stakes[staker] * rewardRate * timeStaked) / (365 days * 100);\r\n    // }\r\n\r\n    // Descomenta y usa la función calculateReward para obtener la recompensa\r\n    // uint256 reward = calculateReward(msg.sender); // <-- Aquí se define 'reward'\r\n    // uint256 totalAmount = stakes[msg.sender] + reward;\r\n\r\n    function withdrawStake() public {\r\n        require(stakes[msg.sender].amount > 0, \"No tokens available for withdrawal\");\r\n\r\n        uint256 totalAmount = stakes[msg.sender].amount;\r\n\r\n        delete stakes[msg.sender];\r\n        require(USDCToken.transfer(msg.sender, totalAmount), \"Token transfer failed\");\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}